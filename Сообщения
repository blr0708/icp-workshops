//1. тут в одной программе сама себе высылает

//1 
// #include <stdio.h>
// #include <stdlib.h>
// #include <sys/ipc.h>
// #include <sys/msg.h>
// #include <string.h>

// #define MAX_TEXT_SIZE 100

// // Шаг 1: Определяем структуру нашего сообщения

// struct mesg_buffer
// {
//     long mesg_type; // Тип сообщения, должен быть > 0
//     char mesg_text[MAX_TEXT_SIZE];
// } message;

// int main()
// {
//     key_t key;
//     key = ftok("progfile", 65);
    
//     int msgid;
//     msgid = msgget(key, 0666 | IPC_CREAT);
//     message.mesg_type = 1;
    
//     printf("Введи сообщение: ");
//     fgets(message.mesg_text, MAX_TEXT_SIZE, stdin);
    
//     msgsnd(msgid, &message, strlen(message.mesg_text)+1,0);
//     msgrcv(msgid, &message, sizeof(message.mesg_text),1,0);
//     printf("Получено сообщение: %s", message.mesg_text);
    
//     msgctl(msgid, IPC_RMID, NULL);
    
//     return 0;
// }

//2. тут 2 процесса
#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_TEXT_SIZE 100

struct mesg_buffer
{
    long mesg_type; 
    char mesg_text[MAX_TEXT_SIZE];
};

int main()
{
    key_t key;
    pid_t pid;
    int msgid;
    
    key = ftok("progfile", 65);
    msgid = msgget(key, 0666 | IPC_CREAT);
    
    pid = fork();
    
    if (pid > 0) {//это код, который выполняет только Родитель.
        
        struct mesg_buffer message_to_send;
        message_to_send.mesg_type = 1; // Мы будем отправлять сообщения типа 1

        fgets(message_to_send.mesg_text, MAX_TEXT_SIZE, stdin);
        
        msgsnd(msgid, &message_to_send, strlen(message_to_send.mesg_text) + 1, 0);
        
        wait(NULL);

        msgctl(msgid, IPC_RMID, NULL);

    } else { // pid == 0
        
        struct mesg_buffer received_message;
        
        msgrcv(msgid, &received_message, sizeof(received_message.mesg_text), 1, 0);
        printf("ПОТОМОК: Сообщение получено! Текст: \"%s\"\n", received_message.mesg_text);
        exit(0);
    }

    return 0; 
}
